# -*- coding: utf-8 -*-
"""DAY_1_pavan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N1Lc4f6GNXCj-bMxlTOverneGxU4wzgv
"""

#1 Display float number with 2 decimal places using print()

f = 45.8947

s = "{:.2f}".format(f)
print(s)

#2 you have the following data. totalMoney = 1000
#quantity = 3
#price = 450
#display above data using string.format() method
#I have 1000 dollars so I can buy 3 football for 450.00 dollars.
totalMoney = 1000
totalMoney = "{:.2f}".format(totalMoney)
quantity = 3
price = 450
#price = "{:.2f}".format(price)
print(f"I have {totalMoney} dollars so I can buy {quantity} football for {price:.2f} dollars.")

# 3 sum of n numbers.
n=3
sum_1 = (n*(n+1))//2
print(sum_1)

#write a program to find volume and surface area of a cylinder
pi = 22/7
heaight = float(input("Enter the height of the cylinder: "))
radius = float(input("Enter the radius of the cylinder: "))
#volume = pi*r*r*h
#surface_area =2(pirh(r+h)) or (2pir*rh)+(2pirh)
volume = pi*radius*radius*heaight
surface_area = (2*pi*radius*heaight) + (2*pi*radius**2)
print(f"the volume of a cylineder is {volume:.2f} units")
print(f"the surface area of a cylinder is {surface_area:.2f} sqaure units")

#Write a Python program to calculate arc length of an angle.
from math import pi
radius = float(input("Enter the radius of the circle: "))
angle = float(input("Enter the angle in degrees: "))
ArcLength = ( 2 * pi * radius ) * ( angle / 360 )
print("{:.2f}".format(ArcLength))

#swapping of two numbers. (Using Temp variable, without using Temp Variable )
#using temp variable
p = 10
b= 6
temp= p
p =b
b =temp
print(p,b)
#without using temp varible

p,b =b,p
print(p,b )

#program to check whether the given number is greater than 50
value = int(input("enter the value :"))
if value >=50:
  print(f"{value} is greater than 50")
else:
  print(f"{value} is less than 50")

#program to find the given number is even or odd
v = int(input("enter the value :"))
if value%2==0:
  print(f"{v} is even")
else:
  print(f"{v} is odd")

#program to find the given number is positive or negative

v = int(input("enter the value :"))
if v >= 0:
  print("the value is positive")
else:
  print("the value is negative")

#program to find greatest of two numbers using if-else


a = int(input("enter the value of a :"))
b = int(input("enter the value of b :"))
if a>b:
  print(f"{a} is greater than {b}")

#program to find greatest of three numbers using elif
p = int(input("enter the value:"))
b =int(input("enter the value:"))
c =int(input("enter the value :"))
if p>b and p>c:
  print(f"{p} is greatest")
elif b>p and b>c:
  print(f"{b} is greatest" )
elif c>p and c>b:
  print(f"{c} is greatest")

#program to find student grade by giving input marks using elif. A-->90+, B-->
#71-90, C--> 50-70, F--> less than 50
marks =int(input("Enter the values :"))
if marks >= 90:
  print("A Grade")

elif marks >= 71 and marks <= 90:
  print("B Grade")

elif marks >= 50 and marks <= 70:
  print("C Grade")

else:
  print("F Grade")

#program to input username and password and verify it. username: RayTech,
#password: 12345

username = input("Please Enter the username :")
password = input("please Enter the password:")
if username == "RayTech" and password == "12345":
  print("Login Successful")
else:
  print("Login Failed")

#14 program to find the given two numbers are equal or not equal and printing greater
a = int(input("Please enter the value :"))
b =int(input("please enter the value :"))
if a ==b:

  print("the given two numbers are equal")
else:
  print("the given two numbers are not equal")
  if a > b:
    print(a , " is greater value")
  else:

        print(b, "is greater value")

from ast import Num
#program to find greatest of three numbers using multiple if

Num= int(input("Enter the value :"))
Num1=int(input("Enter the value:"))
num2=int(input("Enter the value:"))
if Num > Num1 and Num > num2:
  print(f"{Num} is greater")
  if Num1 > Num and Num1 > num2:
    print(f"{Num1} is greater")
  else:
    print(f"{num2} is greater")

#compute gross salary basic is less than 10000 then da is 80% and hra is 25% of basic

basic_salary = float(input("ENTER THE BASIC SALARY :"))
da = 0.80*basic_salary
hra = 0.25*basic_salary
print(da)

#basic is less than 20000 then da is 90% and hra is 25% of basi

basic_salary = float(input("ENTER THE BASIC SALARY :"))
da = 0.90*basic_salary
hra = 0.25*basic_salary
print(da)

#otherwise da is 95% hra is 30% of basic##
basic_salary = float(input("Enter the basic_salary :"))
da = 0.95*basic_salary
hra = 0.30*basic_salary
total_salary = basic_salary+da+hra
print(f"total_salary of basic+da +hra :{total_salary}")
print(f"DA :{da}")

# FOR_LOOP, RANGE ( After While Loop Completes -- solve same questions using
# While Loop )

basic_salary = float(input("Enter the basic salary: "))
while basic_salary <= 0:
    try:
        basic_salary = float(input("Enter the basic salary (positive number): "))
        if basic_salary <= 0:
            print("Please enter a positive number for the basic salary.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")


for _ in range(1):


print(f"DA (95% of Basic): {da}")
print(f"HRA (30% of Basic): {hra}")
print(f"Total Salary (Basic + DA + HRA): {total_salary}")

#printing 10 to 15 #printing 50 to 41
va=[]
re_va=[]
for _ in range(10, 16):
  va.append(_)
print(f"the value of 10 to 15 :{va}")

for a in range(50 , 42 , -1):
  re_va.append(a)

print(f"the values of 50 to 41  :{re_va}")

#printing 3 multiples between 20 to 45
li=[]
for a in range(20,46, 3):
  li.append(a)

print(f"normal_code {li}")


print(f"simple way {[a for a in range(20, 46, 3)]}")

#print odd numbers between 1 to 10
odd_numbers =[]
for a in range(1,11):
  if a%2 != 0:
    odd_numbers.append(a)
print(odd_numbers)

[b for b in range(1,11) if b%2 != 0]

#sum of n numbers.
#if n =6 the sum of nth numbers is (1+2+3+4+5+6)
#the formula of sum of nth numbers = n(n+1)/2
def sum_v(n):
  sum_n_n = n*(n+1)//2
  return sum_n_n
n_1 = int(input("Enter the value :"))

print(f"sum nth number is :{sum_v(n_1)}")

#program to check whether a number is prime or not

print(10%2 != 0)

x = 10
print(id(x))
id(repr(x))  # This would print the string '10' (same as repr(10))

#program to check whether a number is prime or not
va=int(input("TO check whether a number is prime or not  :"))
factors =[]
for a in range(1,va+1):
  if va%a == 0:
    factors.append(a)
print(factors)
if len(factors) == 2:
  print(f"{va} is a prime number")
else:
  print(f"{va} is not a prime number")



#program to find prime numbers between 1 to N
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:  # If divisible by any number, it's not prime
            return False
    return True

# Input number N
N = int(input("Enter a number N to find all prime numbers up to N: "))

# Find and print all prime numbers between 1 and N
print(f"Prime numbers between 1 and {N} are:")
for num in range(2, N + 1):
    if is_prime(num):
        print(num, end=" ")

#Multiplication table (4 Table)
for i in range(1, 11):
  print(f"4 x {i} = {i*4}")

#print below pattern. (input: 5)
# 1
# 22
# 333
# 4444
# 55555
# Input: number of lines
n = int(input("Enter a number: "))

# Print the pattern
for i in range(1, n + 1):
    print(str(i) * i)

#print below pattern. (input: 5)
# 55555
# 4444
# 333
# 22
# 1
for i in range(1 , n+1 , -1):
  print(str(i)*i)

#print below pattern. (input: 5)
# A

# BC
# DEF
# GHIJ
# KLMNO

def print_pattern(n):
    # Starting character
    current_char = ord('A')

    for i in range(1, n + 1):
        # Print 'i' characters in row 'i'
        for j in range(i):
            # Print current character and increment
            print(chr(current_char), end="")
            current_char += 1
        # Move to the next line after each row
        print()

# Call the function with input value 5
print_pattern(5)

#write a python program to find perfect squares between two given numbers
import math

a = int(input("ENTER THE FIRST VALUE :"))
b =int(input("Enter the second value :"))
start_sqrt = math.ceil(math.sqrt(a))
end_sqrt = math.floor(math.sqrt(b))
per_squares = []
#write a python program to find perfect squares between two given numbers
for i in range(start_sqrt, end_sqrt + 1):
    # Calculate the square of the integer and append it to the list
    per_squares.append(i * i)

# Print the list of perfect squares
print("Perfect squares between", a, "and", b, "are:", per_squares)

#armstrong number-sum of cubes of a number is equal to that number. 153 is
#armstrong. Explaintion 1^3 + 5^3 + 3^3 =153
def is_armstrong_number(n):
    # Convert the number to string to get the digits
    digits = str(n)

    # Find the number of digits (length of the string)
    num_digits = len(digits)

    # Calculate the sum of each digit raised to the power of num_digits
    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)

    # Check if the sum is equal to the original number
    return sum_of_powers == n

# Input from the user
num = int(input("Enter a number to check if it's an Armstrong number: "))

# Check if the number is an Armstrong number
if is_armstrong_number(num):
    print(f"{num} is an Armstrong number.")
else:
    print(f"{num} is not an Armstrong number.")

#power of a number ( a^b using Loop )
result =1
a = int(input("Enter the base (a): "))
b = int(input("Enter the exponent (b): "))
for _ in range(b):
  result *= a

print(result)

#first n terms of fibonacci series
def fibonacci(n):

    fib_sequence = []
    a, b = 0, 1
    for i in range(n):
        fib_sequence.append(a)
        a, b = b, a + b

    return fib_sequence

n = int(input("Enter the number of terms you want in the Fibonacci series: "))


fib_series = fibonacci(n)
print(f"The first {n} terms of the Fibonacci series are: {fib_series}")

#perfect number sum of the factors should be equal to itself
#6 ----1+2+3
#28----1+2+4+7+14
divisors=0
n = int(input("ENTER THE FIRST VALUE :"))
for a in range(1,n):
  if n % a == 0:
    divisors += a
if divisors == n:
  print(f"{n} is a perfect number")
else:
  print(f"{n} is not a perfect number")

#program to print every character given by user seperated by comma(,).
char =input("Enter the character :")
for a in char:
  print(a, end=",")

r = ", ".join(char)
print(r)

#program to find the length of name without using len function
name = input("Enter the name :")
count = 0
for a in name:
  count += 1
print(count)
#

#reverse of a string without string handling functions
a = "Ray tech"
def reverse_string(input_string):
    reversed_string = ""
    # Loop through the string in reverse order
    for i in range(len(input_string) - 1, -1, -1):
        reversed_string += input_string[i]
    return reversed_string


user_input = a


print("Reversed string:", reverse_string(user_input))

#program to check whether two strings are equal or not. if both are not equal
#print larger string
def compare_strings(str1, str2):

    if str1 == str2:
        print("Both strings are equal.")
    else:

        if len(str1) > len(str2):
            print(f"The larger string is: {str1}")
        else:
            print(f"The larger string is: {str2}")


string1 = input("Enter the first string: ")
string2 = input("Enter the second string: ")


compare_strings(string1, string2)
print(len(string1))
print(len(string2))

#count the number of 'l's in a string.
def count_l(string):
    return string.count('l')

# Input from the user
user_input = input("Enter a string: ")

# Call the function and print the count of 'l'
print("The number of 'l's in the string is:", count_l(user_input))

a = 5  # binary: 0101
b = 3  # binary: 0011
result = a | b  # result: 7 (binary: 0111)
result

def print_pattern(n):
    current_number = 1  # Start from number 1
    for i in range(1, n + 1):
        for j in range(i):  # Print `i` numbers in the `i`-th row
            print(current_number, end=" ")
            current_number += 1  # Increment the number
        print()  # Move to the next line after each row

# Call the function with 5 rows (as per the example)
print_pattern(5)

# 1234567
# 234567
# 34567
# 4567
# 567
# 67
# 7
def print_pattern(n):
    for i in range(1, n + 1):
        for j in range(i, n + 1):
            print(j, end="")  # Print the number without a space at the end
        print()  # Move to the next line after each row

# Call the function to print the pattern for n = 7
print_pattern(7)

#1
# 1 2
# 1 2 3
# 1 2 3 4
# 1 2 3 4 5
# 1 2 3 4 5 6
# 1 2 3 4 5 6 7
def print_pattern(n):
    for i in range(1, n + 1):  # Outer loop for rows
        for j in range(1, i + 1):  # Inner loop for printing numbers
            print(j, end=" ")  # Print number followed by a space
        print()  # Move to the next line after each row

# Call the function with n = 7
print_pattern(7)

# 1
# 1 1
# 1 2 1
# 1 3 3 1
# 1 4 6 4 1
def print_pascals_triangle(n):
    #
    for i in range(n):
        # Print spaces to center-align the triangle
        print(" " * (n - i - 1), end="")

        # Inner loop for printing the numbers in the row
        value = 1
        for j in range(i + 1):
            print(value, end=" ")
            value = value * (i - j) // (j + 1)  # Calculate the next binomial coefficient

        print()  # Move to the next line after each row

# Call the function with n = 5 to print the first 5 rows
print_pascals_triangle(5)

import itertools
import random

# List of books
books = ['BOOK 1', 'BOOK 2', 'BOOK 3', 'BOOK 4']

# Find all combinations of 2 books from the list of books
combinations = list(itertools.combinations(books, 2))

# Randomly choose one combination
random_combination = random.choice(combinations)

# Print the random combination
print(random_combination)

# 4 4 4 4 4 4 4
# 4 3 3 3 3 3 4
# 4 3 2 2 2 3 4
# 4 3 2 1 2 3 4
# 4 3 2 2 2 3 4
# 4 3 3 3 3 3 4
# 4 4 4 4 4 4 4

def print_pattern(n):
    # Iterate over the rows
    for i in range(n):
        # Iterate over the columns
        for j in range(n):
            # Calculate the value to print based on the minimum distance from the borders
            value = 4 - min(i, j, n - i - 1, n - j - 1)
            print(value, end=" ")
        print()  # Move to the next line after each row

# Print the pattern for a 7x7 grid
print_pattern(7)



